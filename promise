promise:
a promise is a special java script object that represents the eventual completion (or failure )of an asynchronous operation.


---1)three states 
  ---1)pending : the intial state, the promise is still waiting fotr the operation to finish
---2)Fulfilled: the operation completed successfully
---3)Rejected: the operation failed

Exp: 
--To create a promise new promise();
the promise constructor takes a function with two parameters:
resolve --to mark as the promise is successful
reject --to mark it a failed

Handling: 
.then () method  is called when the promise is fulfilled.
it receives the result from the resolve();
.catch() method is called when promise is rejected;
it receives the result from the reject();

EX:
let myPromise =new Promise((resolve,reject)=>{
        let sucess = true
        if(sucess){
          resolve("sucess");
          }else{
            reject("error");
          }
      });
      myPromise
      .then(result=>{
        console.log(result);
      })
      .catch(error=>{
        console.log(error);
      })

o/p:
     sucess 

_---chaining promises:
----You can have chain multiple .then()
EX:
new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve('success');
    }, 1000);
    }
).then((data) => {
    console.log(data);  
    return 'some other data';
}
).then((data) => {
    console.log(data);
}
).catch((error) => {
    console.log(error);
}  
);
o/p:
   success
   some other data
1)promise with set time out
--using settimeout the promise will resolve after certain amount of time3
ex:
let delayedPromise = new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve("Promise resolved after 2 seconds");
    }, 2000); 
});

delayedPromise
    .then(result => {
        console.log(result); 
    })
    .catch(error => {
        console.log("Error:", error);
    });
O/P:
   Promise resolved after 2 seconds
